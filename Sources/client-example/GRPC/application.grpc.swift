//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: application.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate ThermostatServiceClient, then call methods of this protocol to make API calls.
internal protocol ThermostatServiceClientProtocol {
  func getMeasurements(_ request: _ThermostatID, callOptions: CallOptions?, handler: @escaping (_Measurement) -> Void) -> ServerStreamingCall<_ThermostatID, _Measurement>
  func getThermostatIds(_ request: _Empty, callOptions: CallOptions?, handler: @escaping (_ThermostatID) -> Void) -> ServerStreamingCall<_Empty, _ThermostatID>
  func getThermostatWithId(_ request: _ThermostatID, callOptions: CallOptions?) -> UnaryCall<_ThermostatID, _Thermostat>
  func uploadMeasurements(callOptions: CallOptions?, handler: @escaping (_Measurement) -> Void) -> BidirectionalStreamingCall<_Measurement, _Measurement>
  func calculateStatistics(callOptions: CallOptions?) -> ClientStreamingCall<_Measurement, _MeasurementStats>
}

internal final class ThermostatServiceClient: GRPCClient, ThermostatServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the ThermostatService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }

  /// Server streaming call to GetMeasurements
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMeasurements.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getMeasurements(_ request: _ThermostatID, callOptions: CallOptions? = nil, handler: @escaping (_Measurement) -> Void) -> ServerStreamingCall<_ThermostatID, _Measurement> {
    return self.makeServerStreamingCall(path: "/ThermostatService/GetMeasurements",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Server streaming call to GetThermostatIds
  ///
  /// - Parameters:
  ///   - request: Request to send to GetThermostatIds.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getThermostatIds(_ request: _Empty, callOptions: CallOptions? = nil, handler: @escaping (_ThermostatID) -> Void) -> ServerStreamingCall<_Empty, _ThermostatID> {
    return self.makeServerStreamingCall(path: "/ThermostatService/GetThermostatIds",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Unary call to GetThermostatWithId
  ///
  /// - Parameters:
  ///   - request: Request to send to GetThermostatWithId.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getThermostatWithId(_ request: _ThermostatID, callOptions: CallOptions? = nil) -> UnaryCall<_ThermostatID, _Thermostat> {
    return self.makeUnaryCall(path: "/ThermostatService/GetThermostatWithId",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Bidirectional streaming call to UploadMeasurements
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func uploadMeasurements(callOptions: CallOptions? = nil, handler: @escaping (_Measurement) -> Void) -> BidirectionalStreamingCall<_Measurement, _Measurement> {
    return self.makeBidirectionalStreamingCall(path: "/ThermostatService/UploadMeasurements",
                                               callOptions: callOptions ?? self.defaultCallOptions,
                                               handler: handler)
  }

  /// Client streaming call to CalculateStatistics
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  internal func calculateStatistics(callOptions: CallOptions? = nil) -> ClientStreamingCall<_Measurement, _MeasurementStats> {
    return self.makeClientStreamingCall(path: "/ThermostatService/CalculateStatistics",
                                        callOptions: callOptions ?? self.defaultCallOptions)
  }

}

// Provides conformance to `GRPCPayload` for request and response messages
extension _ThermostatID: GRPCProtobufPayload {}
extension _Measurement: GRPCProtobufPayload {}
extension _Empty: GRPCProtobufPayload {}
extension _Thermostat: GRPCProtobufPayload {}
extension _MeasurementStats: GRPCProtobufPayload {}

